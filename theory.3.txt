Dictionary Methods
Python has a set of built-in methods that you can use on dictionaries.

Method	Description
clear()	Removes all the elements from the dictionary
copy()	Returns a copy of the dictionary
fromkeys()	Returns a dictionary with the specified keys and value
get()	Returns the value of the specified key
items()	Returns a list containing a tuple for each key value pair
keys()	Returns a list containing the dictionary's keys
pop()	Removes the element with the specified key
popitem()	Removes the last inserted key-value pair
setdefault()	Returns the value of the specified key. If the key does not exist: insert the key, with the specified value
update()	Updates the dictionary with the specified key-value pairs
values()	Returns a list of all the values in the dictionary

Example
Make a copy of a dictionary with the dict() function:

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
mydict = dict(thisdict)
print(mydict)


OUTPUT :-  {'brand': 'Ford', 'model': 'Mustang', 'year': 1964}

Python Functions
A function is a block of code which only runs when it is called.

You can pass data, known as parameters, into a function.

A function can return data as a result.

Creating a Function
In Python a function is defined using the def keyword:

Example
def my_function():
  print("Hello from a shinchan")
Calling a Function
To call a function, use the function name followed by parenthesis:

Example
def my_function():
  print("Hello from a shinchan")

my_function()
output :- Hello from a shinchan

If you do not know how many keyword arguments that will be passed into your function, add two asterisk: ** before the parameter name in the function definition.

This way the function will receive a dictionary of arguments, and can access the items accordingly:

Example
If the number of keyword arguments is unknown, add a double ** before the parameter name:

def my_function(**kid):
  print("His last name is " + kid["lname"])

my_function(fname = "chhota", lname = "bheem")

output :- His last name is bheem

2)  Python Sets
myset = {"shinchan", "chhota bheem", "chutki"}
Set
Sets are used to store multiple items in a single variable.

Set is one of 4 built-in data types in Python used to store collections of data, the other 3 are List, Tuple, and Dictionary, all with different qualities and usage.

A set is a collection which is unordered, unchangeable*, and unindexed.

* Note: Set items are unchangeable, but you can remove items and add new items.

Sets are written with curly brackets.

Example
Create a Set:

thisset = {"shinchan", "chhota bheem", "chutki"}
print(thisset)

output :- {'shinchan', 'chhota bheem', 'chutki'}
Python - Access Set Items
Access Items
You cannot access items in a set by referring to an index or a key.

But you can loop through the set items using a for loop, or ask if a specified value is present in a set, by using the in keyword.

Example
Loop through the set, and print the values:

thisset = {"shinchan", "chhota bheem", "chutki"}

for x in thisset:
  print(x)

output :-  chhota bheem
           shinchan
            chutki
thisset = {"shinchan", "chhota bheem", "chutki"}

print("chhota bheem" in thisset)

output :- true


Python - Add Set Items

Add Sets
To add items from another set into the current set, use the update() method.

Example
Add elements from tropical into thisset:

thisset = {"shinchan", "chhota bheem", "chutki"}
tropical = {"tom weasley", "hermione", "juggu"}

thisset.update(tropical)

print(thisset)

output :-"shinchan", "chhota bheem", "chutki","tom weasley", "hermione", "juggu"

Python - Remove Set Items
Remove Item
Example
Remove the last item by using the pop() method:

thisset = {"tom weasley", "hermione", "juggu"}

x = thisset.pop()

print(x)

print(thisset)

output :- juggu
          {'tom weasley','hermione'}

Python - Loop Sets
Loop Items
You can loop through the set items by using a for loop:

Example
Loop through the set, and print the values:

thisset = {"tom weasley", "hermione", "juggu"}

for x in thisset:
  print(x)

output :- hermione
          tom weasley
          juggu
Python - Join Sets
Join Two Sets
There are several ways to join two or more sets in Python.

You can use the union() method that returns a new set containing all items from both sets, 
or the update() method that inserts all the items from one set into another:
set1 = {"d", "o" , "g"}
set2 = {1, 2, 3}

set1.update(set2)
print(set1)
output :- {2, 1, 'g', 3, 'o', 'd'}



Python - Set Methods
Set Methods
Python has a set of built-in methods that you can use on sets.

Method	Description
add()	Adds an element to the set
clear()	Removes all the elements from the set
copy()	Returns a copy of the set
difference()	Returns a set containing the difference between two or more sets
difference_update()	Removes the items in this set that are also included in another, specified set
discard()	Remove the specified item
intersection()	Returns a set, that is the intersection of two other sets
intersection_update()	Removes the items in this set that are not present in other, specified set(s)
isdisjoint()	Returns whether two sets have a intersection or not
issubset()	Returns whether another set contains this set or not
issuperset()	Returns whether this set contains another set or not
pop()	Removes an element from the set
remove()	Removes the specified element
symmetric_difference()	Returns a set with the symmetric differences of two sets
symmetric_difference_update()	inserts the symmetric differences from this set and another
union()	Return a set containing the union of sets
update()	Update the set with the union of this set and others





